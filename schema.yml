openapi: 3.0.3
info:
  title: Task Manager API Project
  version: 1.0.0
  description: API for managing tasks
paths:
  /api/v1/current-user:
    get:
      operationId: api_v1_current_user_retrieve
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetail'
          description: ''
  /api/v1/dj-rest-auth/login/:
    post:
      operationId: api_v1_dj_rest_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/v1/dj-rest-auth/logout/:
    post:
      operationId: api_v1_dj_rest_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/dj-rest-auth/password/change/:
    post:
      operationId: api_v1_dj_rest_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/dj-rest-auth/password/reset/:
    post:
      operationId: api_v1_dj_rest_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/dj-rest-auth/password/reset/confirm/:
    post:
      operationId: api_v1_dj_rest_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/dj-rest-auth/user/:
    get:
      operationId: api_v1_dj_rest_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: api_v1_dj_rest_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: api_v1_dj_rest_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /api/v1/regulatory-documents/:
    get:
      operationId: api_v1_regulatory_documents_list
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegulatoryDocument'
          description: ''
    post:
      operationId: api_v1_regulatory_documents_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegulatoryDocument'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegulatoryDocument'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegulatoryDocument'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegulatoryDocument'
          description: ''
  /api/v1/regulatory-documents/{id}/:
    get:
      operationId: api_v1_regulatory_documents_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this regulatory document.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegulatoryDocument'
          description: ''
    put:
      operationId: api_v1_regulatory_documents_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this regulatory document.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegulatoryDocument'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegulatoryDocument'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegulatoryDocument'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegulatoryDocument'
          description: ''
    patch:
      operationId: api_v1_regulatory_documents_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this regulatory document.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegulatoryDocument'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegulatoryDocument'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegulatoryDocument'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegulatoryDocument'
          description: ''
    delete:
      operationId: api_v1_regulatory_documents_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this regulatory document.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/tasks/:
    get:
      operationId: api_v1_tasks_list
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
          description: ''
    post:
      operationId: api_v1_tasks_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /api/v1/tasks/{id}/:
    get:
      operationId: api_v1_tasks_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    put:
      operationId: api_v1_tasks_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    patch:
      operationId: api_v1_tasks_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTask'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTask'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTask'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    delete:
      operationId: api_v1_tasks_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/users/:
    get:
      operationId: api_v1_users_list
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomUserList'
          description: ''
  /api/v1/users/{id}/:
    get:
      operationId: api_v1_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetail'
          description: ''
  /api/v1/users/{id}/detail/:
    get:
      operationId: api_v1_users_detail_retrieve
      description: |-
        bool(x) -> bool

        Returns True when the argument x is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetail'
          description: ''
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    CustomUser:
      type: object
      properties:
        full_name:
          type: string
          maxLength: 100
      required:
      - full_name
    CustomUserDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        full_name:
          type: string
          maxLength: 100
        position:
          type: string
          maxLength: 100
        deputy:
          allOf:
          - $ref: '#/components/schemas/CustomUser'
          readOnly: true
        main_tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
          readOnly: true
        co_tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
          readOnly: true
        is_admin:
          type: string
          readOnly: true
      required:
      - co_tasks
      - deputy
      - full_name
      - id
      - is_admin
      - main_tasks
      - position
      - username
    CustomUserList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        full_name:
          type: string
          maxLength: 100
        position:
          type: string
          maxLength: 100
        deputy:
          allOf:
          - $ref: '#/components/schemas/CustomUser'
          readOnly: true
      required:
      - deputy
      - full_name
      - id
      - position
      - username
    DocTypeEnum:
      enum:
      - Протокол
      - Решение
      - Приказ
      - Распоряжение
      type: string
      description: |-
        * `Протокол` - Протокол
        * `Решение` - Решение
        * `Приказ` - Приказ
        * `Распоряжение` - Распоряжение
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    NullEnum:
      enum:
      - null
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedRegulatoryDocument:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
          readOnly: true
        doc_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DocTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        date_approved:
          type: string
          format: date
        registration_number:
          type: string
          maxLength: 100
        full_name:
          type: string
          maxLength: 255
        status:
          type: boolean
    PatchedTask:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        main_executor_id:
          type: integer
          writeOnly: true
        co_executors_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        main_executor:
          allOf:
          - $ref: '#/components/schemas/CustomUser'
          readOnly: true
        co_executors:
          type: array
          items:
            $ref: '#/components/schemas/CustomUser'
          readOnly: true
        content:
          type: string
        deadline:
          type: string
          format: date
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        notes:
          type: string
          nullable: true
        regulation:
          type: integer
          nullable: true
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    RegulatoryDocument:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
          readOnly: true
        doc_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DocTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        date_approved:
          type: string
          format: date
        registration_number:
          type: string
          maxLength: 100
        full_name:
          type: string
          maxLength: 255
        status:
          type: boolean
      required:
      - date_approved
      - full_name
      - id
      - registration_number
      - tasks
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    StatusEnum:
      enum:
      - Исполнено
      - Не исполнено
      type: string
      description: |-
        * `Исполнено` - Исполнено
        * `Не исполнено` - Не исполнено
    Task:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        main_executor_id:
          type: integer
          writeOnly: true
        co_executors_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        main_executor:
          allOf:
          - $ref: '#/components/schemas/CustomUser'
          readOnly: true
        co_executors:
          type: array
          items:
            $ref: '#/components/schemas/CustomUser'
          readOnly: true
        content:
          type: string
        deadline:
          type: string
          format: date
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        notes:
          type: string
          nullable: true
        regulation:
          type: integer
          nullable: true
      required:
      - co_executors
      - co_executors_ids
      - content
      - id
      - main_executor
      - main_executor_id
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - pk
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
